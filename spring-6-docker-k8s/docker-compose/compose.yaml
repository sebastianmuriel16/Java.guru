# docker run --name mysql -d -e MYSQL_USER=restadmin -e MYSQL_PASSWORD=password -e MYSQL_DATABASE=restdb -e MYSQL_ROOT_PASSWORD=password mysql:8
services:
  mysql:
    container_name: mysql
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: restdb
      MYSQL_USER: restadmin
      MYSQL_PASSWORD: password
    expose:
      - 3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
  # docker run -d --name mongo -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=example -p 27017:27017 mongo
  mongo:
    container_name: mongo
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: sebastian
      MONGO_INITDB_ROOT_PASSWORD: zirael#43#
    expose:
      - 27017
    # ports:
    #   - 27017:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 10s
      retries: 5

    #docker run --name auth-server -d -p 9000:9000 spring-6-auth-server:0.0.1-SNAPSHOT
  auth-server:
    container_name: auth-server
    image: spring-6-auth-server:0.0.1-SNAPSHOT
    expose:
      - 9000
    ports:
      - 9000:9000
  # docker stop rest-mvc
  # docker rm rest-mvc
  # docker run --name rest-mvc -d -p 8081:8080 -e SPRING_PROFILES_ACTIVE=localmysql \
  #  -e SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://auth-server:9000 -e SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/restdb  \
  #  -e SERVER_PORT=8080 --link auth-server:auth-server --link mysql:mysql spring-6-rest-mvc:0.0.1-SNAPSHOT
  rest-mvc:
    container_name: rest-mvc
    image: spring-6-rest-mvc:0.0.1-SNAPSHOT
    expose:
      - 8080
    environment:
      SPRING_PROFILES_ACTIVE: localmysql
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://auth-server:9000
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/restdb
      SERVER_PORT: 8080
    depends_on:
      mysql:
        condition: service_healthy

  # docker run --name reactive -d -p 8082:8082 -e SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://auth-server:9000 \
  #  --link auth-server:auth-server spring-6-reactive:0.0.1-SNAPSHOT
  reactive:
    container_name: reactive
    image: spring-6-reactive:0.0.1-SNAPSHOT
    expose:
      - 8080
    environment:
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://auth-server:9000
  # docker run --name reactive-mongo -d  -e SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://auth-server:9000 \
  #  -e SFG_MONGOHOST=mongo -e SERVER_PORT=8080 --link auth-server:auth-server --link mongo:mongo reactive-mongo:0.0.1-SNAPSHOT
  reactive-mongo:
    container_name: reactive-mongo
    image: spring-6-reactive-mongo:0.0.1-SNAPSHOT
    expose:
      - 8080
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://sebastian:zirael%2343%23@mongo:27017/reactive_mongo?authSource=admin
      SERVER_PORT: 8080
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://auth-server:9000
    depends_on:
      mongo:
        condition: service_healthy
  # docker run --name gateway -d -p 8080:8080 -e SPRING_PROFILES_ACTIVE=docker --link auth-server:auth-server --link rest-mvc:rest-mvc \
  # --link reactive:reactive --link reactive-mongo:reactive-mongo spring-6-gateway:0.0.1-SNAPSHOT
  gateway:
    container_name: gateway
    image: spring-6-gateway:0.0.1-SNAPSHOT
    expose:
      - 8080
    ports:
      - 8080:8080
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://auth-server:9000
    depends_on:
      - auth-server
      - rest-mvc
      - reactive
      - reactive-mongo
